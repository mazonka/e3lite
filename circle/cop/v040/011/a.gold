
[-cg cir22]
reading [cir22]
Verilog written

=== start cir22.v
// # Generated by Circle

module cir22 (
input wire x, z,
output wire a, b
);

assign a = x & x;
assign b = z | z;

endmodule

module cir22_array (a,z);
input [1:0] a;
output [1:0] z;
cir22 cir221(a[0],a[1],z[0],z[1]);
endmodule
=== end cir22.v

[-cg cir32]
reading [cir32]
Verilog written

=== start cir32.v
// # Generated by Circle

module cir32 (
input wire w, x, z,
output wire a, b
);

assign a = x & x;
assign b = z | w;

endmodule
=== end cir32.v

[-cg cir42]
reading [cir42]
Verilog written

=== start cir42.v
// # Generated by Circle

module cir42 (
input wire w, x, y, z,
output wire a, b
);

assign a = x & y;
assign b = z | w;

endmodule

module cir42_array (a,b,z);
input [1:0] a;
input [1:0] b;
output [1:0] z;
cir42 cir421(a[0],a[1],b[0],b[1],z[0],z[1]);
endmodule
=== end cir42.v

[-cg cir62]
reading [cir62]
Verilog written

=== start cir62.v
// # Generated by Circle

module cir62 (
input wire u, v, w, x, y, z,
output wire a, b
);

assign a = x & y & u & v;
assign b = z | w;

endmodule

module cir62_array (a,b,c,z);
input [1:0] a;
input [1:0] b;
input [1:0] c;
output [1:0] z;
cir62 cir621(a[0],a[1],b[0],b[1],c[0],c[1],z[0],z[1]);
endmodule
=== end cir62.v

[-cg cir84]
reading [cir84]
Verilog written

=== start cir84.v
// # Generated by Circle

module cir84 (
input wire x0, x1, x2, x3, x4, x5, x6, x7,
output wire y0, y1, y2, y3
);

assign y0 = x0;
assign y0 = x1;
assign y1 = x2;
assign y1 = x3;
assign y2 = x4;
assign y2 = x5;
assign y3 = x6;
assign y3 = x7;

endmodule

module cir84_array (a,b,z);
input [3:0] a;
input [3:0] b;
output [3:0] z;
cir84 cir841(a[0],a[1],a[2],a[3],b[0],b[1],b[2],b[3],z[0],
  z[1],z[2],z[3]);
endmodule
=== end cir84.v
