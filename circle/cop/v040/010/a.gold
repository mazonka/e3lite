
[-cl cir1]
reading [cir1]
C written

=== start cir1.c
// # Generated by Circle

void cir1_5_2(const char *x_, char *y_)
{
char u = x_[0];
char w = x_[1];
char x = x_[2];
char y = x_[3];
char z = x_[4];
char a = x & y & u;
char b = z | w;
y_[0] = a;
y_[1] = b;
}

int test_cir1_5_2()
{
  int i, j;
  char x[5];
  char y[2];

  for (i = 0; i < 1; i++) for (j = 0; j < 1000; j++)
  {
    cir1_5_2 (x,y);
    x[0] = y[0]; /* no opt */
  }
  return 0;
}
=== end cir1.c

[-cl cir2]
reading [cir2]
C written

=== start cir2.c
// # Generated by Circle

void cir2_binop_2(const char * a_, const char *b_, char *y_)
{
char w = a_[0];
char x = a_[1];
char y = b_[0];
char z = b_[1];
char a = x & y;
char b = z | w;
y_[0] = a;
y_[1] = b;
}

int test_cir2_binop_2()
{
  int i, j;
  char a[2], b[2];
  char y[2];

  for (i = 0; i < 1; i++) for (j = 0; j < 1000; j++)
  {
    cir2_binop_2 (a,b,y);
    a[0] = y[0]; /* no opt */
  }
  return 0;
}
=== end cir2.c

[-cl cir3]
reading [cir3]
C written

=== start cir3.c
// # Generated by Circle

void cir3_triop_2(const char * a_, const char *b_, const char *c_, char *y_)
{
char u = a_[0];
char v = a_[1];
char w = b_[0];
char x = b_[1];
char y = c_[0];
char z = c_[1];
char a = x & y & u & v;
char b = z | w;
y_[0] = a;
y_[1] = b;
}

int test_cir3_triop_2()
{
  int i, j;
  char a[2], b[2], c[2];
  char y[2];

  for (i = 0; i < 1; i++) for (j = 0; j < 1000; j++)
  {
    cir3_triop_2 (a,b,c,y);
    a[0] = y[0]; /* no opt */
  }
  return 0;
}
=== end cir3.c
